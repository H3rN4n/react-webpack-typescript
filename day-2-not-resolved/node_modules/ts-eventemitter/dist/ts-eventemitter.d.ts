interface TsEventEmitter {
    event(name: string): TsEventEmitter.Event;
    removeAllListeners(): void;
    setMaxListeners(n: number): void;
}
declare namespace TsEventEmitter {
    function create(): TsEventEmitter;
    interface Event {
    }
    interface Event0<E extends TsEventEmitter> extends Event {
        on(listener: () => any): E;
        addListener(listener: () => any): E;
        off(listener: () => any): E;
        removeListener(listener: () => any): E;
        removeAllListeners(): E;
        listeners(): {
            (): any;
        }[];
        once(listener: () => any): E;
        emit(): boolean;
    }
    interface Event1<E extends TsEventEmitter, T> extends Event {
        on(listener: (arg: T) => any): E;
        addListener(listener: (arg: T) => any): E;
        off(listener: (arg: T) => any): E;
        removeListener(listener: (arg: T) => any): E;
        removeAllListeners(): E;
        listeners(): {
            (arg: T): any;
        }[];
        once(listener: (arg: T) => any): E;
        emit(arg: T): boolean;
    }
}
export default TsEventEmitter;
